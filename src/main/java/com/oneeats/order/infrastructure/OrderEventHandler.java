package com.oneeats.order.infrastructure;

import com.oneeats.order.domain.events.OrderCreatedEvent;
import com.oneeats.order.domain.events.OrderStatusChangedEvent;
import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.event.Observes;
import org.jboss.logging.Logger;

/**
 * Gestionnaire d'√©v√©nements pour le domaine Order
 * √âcoute les √©v√©nements m√©tier et d√©clenche des actions
 */
@ApplicationScoped
public class OrderEventHandler {
    
    private static final Logger LOG = Logger.getLogger(OrderEventHandler.class);
    
    /**
     * Gestion de l'√©v√©nement de cr√©ation de commande
     */
    public void handleOrderCreated(@Observes OrderCreatedEvent event) {
        LOG.infof("üì¶ Nouvelle commande cr√©√©e: %s pour l'utilisateur %s", 
                 event.getOrderId(), event.getUserId());
        
        // Actions √† d√©clencher lors de la cr√©ation d'une commande:
        // - Envoyer notification au restaurant
        // - Envoyer confirmation √† l'utilisateur
        // - Mettre √† jour les m√©triques
        // - Logger pour audit
        
        try {
            // Simuler l'envoi de notification au restaurant
            notifyRestaurant(event);
            
            // Simuler l'envoi de confirmation √† l'utilisateur
            sendUserConfirmation(event);
            
            // Mettre √† jour les statistiques
            updateOrderMetrics(event);
            
        } catch (Exception e) {
            LOG.errorf(e, "Erreur lors du traitement de l'√©v√©nement OrderCreated: %s", e.getMessage());
            // En production, on pourrait republier l'√©v√©nement ou l'enregistrer pour retry
        }
    }
    
    /**
     * Gestion des changements de statut
     */
    public void handleOrderStatusChanged(@Observes OrderStatusChangedEvent event) {
        LOG.infof("üìã Statut de commande chang√©: %s (%s ‚Üí %s)", 
                 event.getOrderId(), event.getPreviousStatus(), event.getNewStatus());
        
        try {
            // Actions sp√©cifiques selon le type de changement
            if (event.isOrderConfirmed()) {
                handleOrderConfirmed(event);
            } else if (event.isOrderReady()) {
                handleOrderReady(event);
            } else if (event.isOrderCompleted()) {
                handleOrderCompleted(event);
            } else if (event.isOrderCancelled()) {
                handleOrderCancelled(event);
            }
            
        } catch (Exception e) {
            LOG.errorf(e, "Erreur lors du traitement de l'√©v√©nement OrderStatusChanged: %s", e.getMessage());
        }
    }
    
    // Actions sp√©cifiques par type de changement de statut
    
    private void handleOrderConfirmed(OrderStatusChangedEvent event) {
        LOG.infof("‚úÖ Commande %s confirm√©e par le restaurant", event.getOrderId());
        
        // - Notifier l'utilisateur que sa commande est en pr√©paration
        // - Calculer le temps estim√© de pr√©paration
        // - D√©clencher le workflow de pr√©paration
        
        sendNotificationToUser(event.getUserId(), 
            "Votre commande est confirm√©e et en cours de pr√©paration !");
    }
    
    private void handleOrderReady(OrderStatusChangedEvent event) {
        LOG.infof("üîî Commande %s pr√™te √† r√©cup√©rer", event.getOrderId());
        
        // - Notifier l'utilisateur que sa commande est pr√™te
        // - Envoyer push notification
        // - D√©marrer le timer de r√©cup√©ration
        
        sendNotificationToUser(event.getUserId(), 
            "Votre commande est pr√™te ! Vous pouvez venir la r√©cup√©rer.");
    }
    
    private void handleOrderCompleted(OrderStatusChangedEvent event) {
        LOG.infof("‚ú® Commande %s r√©cup√©r√©e avec succ√®s", event.getOrderId());
        
        // - Remercier l'utilisateur
        // - Demander un avis/note
        // - Mettre √† jour les statistiques de satisfaction
        // - Proposer des commandes similaires
        
        sendNotificationToUser(event.getUserId(), 
            "Merci pour votre commande ! N'h√©sitez pas √† laisser un avis.");
    }
    
    private void handleOrderCancelled(OrderStatusChangedEvent event) {
        LOG.infof("‚ùå Commande %s annul√©e", event.getOrderId());
        
        // - Notifier l'utilisateur de l'annulation
        // - Traiter le remboursement si applicable
        // - Enregistrer la raison pour am√©lioration
        // - Proposer des alternatives
        
        sendNotificationToUser(event.getUserId(), 
            "Votre commande a √©t√© annul√©e. Nous nous excusons pour la g√™ne.");
    }
    
    // M√©thodes utilitaires (simul√©es pour l'exemple)
    
    private void notifyRestaurant(OrderCreatedEvent event) {
        LOG.debugf("üì® Notification restaurant %s: nouvelle commande %s", 
                  event.getRestaurantId(), event.getOrderId());
        
        // En production: int√©gration avec service de notifications
        // - Push notification √† l'app restaurant
        // - Email/SMS si configur√©
        // - Webhook si int√©gration tierce
    }
    
    private void sendUserConfirmation(OrderCreatedEvent event) {
        LOG.debugf("üìß Confirmation utilisateur %s: commande %s cr√©√©e", 
                  event.getUserId(), event.getOrderId());
        
        // En production: 
        // - Email de confirmation avec d√©tails
        // - Push notification mobile
        // - SMS si configur√©
    }
    
    private void updateOrderMetrics(OrderCreatedEvent event) {
        LOG.debugf("üìä Mise √† jour m√©triques: nouvelle commande %s‚Ç¨ restaurant %s", 
                  event.getTotalAmount(), event.getRestaurantId());
        
        // En production:
        // - Incr√©menter compteurs Prometheus/Micrometer
        // - Mettre √† jour cache des statistiques temps r√©el
        // - Envoyer √©v√©nements vers data warehouse
    }
    
    private void sendNotificationToUser(java.util.UUID userId, String message) {
        LOG.debugf("üîî Notification utilisateur %s: %s", userId, message);
        
        // En production: int√©gration service notifications
        // - Push via Expo/Firebase
        // - WebSocket pour temps r√©el
        // - Email/SMS selon pr√©f√©rences utilisateur
    }
}