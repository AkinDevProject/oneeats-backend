package com.oneeats.order.application.event;

import com.oneeats.notification.application.command.CreateNotificationCommand;
import com.oneeats.notification.application.command.CreateNotificationCommandHandler;
import com.oneeats.notification.domain.model.NotificationType;
import com.oneeats.notification.infrastructure.websocket.WebSocketNotificationService;
import com.oneeats.order.domain.event.OrderStatusChangedEvent;
import com.oneeats.order.domain.model.OrderStatus;
import jakarta.enterprise.context.ApplicationScoped;
import jakarta.enterprise.event.Observes;
import jakarta.inject.Inject;
import jakarta.transaction.Transactional;

import java.util.logging.Logger;

@ApplicationScoped
public class OrderStatusChangedEventHandler {

    private static final Logger LOGGER = Logger.getLogger(OrderStatusChangedEventHandler.class.getName());

    @Inject
    CreateNotificationCommandHandler createNotificationCommandHandler;

    @Inject
    WebSocketNotificationService webSocketNotificationService;

    @Transactional
    public void handle(@Observes OrderStatusChangedEvent event) {
        LOGGER.info("üîî Handling OrderStatusChangedEvent for order: " + event.getOrderId() +
                   " - User: " + event.getUserId() +
                   " - Restaurant: " + event.getRestaurantId() +
                   " - Status change: " + event.getPreviousStatus() + " ‚Üí " + event.getNewStatus());

        // Cr√©er une notification pour l'utilisateur
        String title = getNotificationTitle(event.getNewStatus());
        String message = getNotificationMessage(event.getNewStatus());

        if (title != null && message != null) {
            CreateNotificationCommand notificationCommand = new CreateNotificationCommand(
                event.getUserId(),
                getNotificationType(event.getNewStatus()),
                title,
                message
            );

            try {
                // Save notification to database
                createNotificationCommandHandler.handle(notificationCommand);
                LOGGER.info("‚úÖ Database notification created successfully for order: " + event.getOrderId());

                // Send real-time notification via WebSocket
                LOGGER.info("üì° Attempting to send WebSocket notification for user: " + event.getUserId());
                webSocketNotificationService.sendOrderStatusNotification(
                    event.getUserId(),
                    event.getOrderId(),
                    event.getNewStatus().toString(),
                    title,
                    message
                );
                LOGGER.info("üöÄ WebSocket notification sent successfully for order: " + event.getOrderId());
            } catch (Exception e) {
                LOGGER.severe("‚ùå Failed to process notification for order: " + event.getOrderId() +
                             " - Error: " + e.getMessage());
                e.printStackTrace();
            }
        } else {
            LOGGER.warning("‚ö†Ô∏è No notification generated for status: " + event.getNewStatus());
        }
    }

    private String getNotificationTitle(OrderStatus status) {
        switch (status) {
            case CONFIRMED:
                return "Commande confirm√©e ! üéâ";
            case PREPARING:
                return "Pr√©paration en cours üë®‚Äçüç≥";
            case READY:
                return "Commande pr√™te ! üçΩÔ∏è";
            case COMPLETED:
                return "Commande termin√©e ‚úÖ";
            case CANCELLED:
                return "Commande annul√©e ‚ùå";
            default:
                return null;
        }
    }

    private String getNotificationMessage(OrderStatus status) {
        switch (status) {
            case CONFIRMED:
                return "Votre commande a √©t√© confirm√©e et sera bient√¥t pr√©par√©e.";
            case PREPARING:
                return "Votre commande est en cours de pr√©paration.";
            case READY:
                return "Votre commande est pr√™te √† √™tre r√©cup√©r√©e !";
            case COMPLETED:
                return "Merci d'avoir choisi notre service ! N'h√©sitez pas √† laisser un avis.";
            case CANCELLED:
                return "Votre commande a √©t√© annul√©e. Si vous avez des questions, contactez le support.";
            default:
                return null;
        }
    }

    private NotificationType getNotificationType(OrderStatus status) {
        switch (status) {
            case CONFIRMED:
            case PREPARING:
            case READY:
            case COMPLETED:
                return NotificationType.ORDER_STATUS_UPDATE;
            case CANCELLED:
                return NotificationType.ORDER_CANCELLED;
            default:
                return NotificationType.ORDER_STATUS_UPDATE;
        }
    }
}