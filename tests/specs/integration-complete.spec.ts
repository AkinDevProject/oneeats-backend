import { test, expect } from '@playwright/test';
import { ApiHelper } from '../helpers/api-helper';

test.describe('Integration Compl√®te : Flow OneEats End-to-End', () => {
  let api: ApiHelper;
  const PIZZA_PALACE_ID = '11111111-1111-1111-1111-111111111111';
  const TEST_USER_ID = '12345678-1234-1234-1234-123456789012';

  test.beforeAll(async ({ request }) => {
    api = new ApiHelper(request);
  });

  test('Flow complet : Dashboard ‚Üí API ‚Üí Mobile ‚Üí BDD', async ({ page }) => {
    console.log('üéØ Test Flow Complet OneEats');
    
    // PHASE 1: V√©rification Dashboard
    console.log('üìä PHASE 1: Dashboard Restaurant');
    
    await page.goto('/restaurant/menu');
    await page.waitForLoadState('networkidle');
    
    // V√©rifier que le dashboard affiche les bons plats
    const dashboardItemCount = await page.locator('[data-testid="menu-item-card"]').count();
    console.log(`üåê Dashboard: ${dashboardItemCount} plats affich√©s`);
    
    // PHASE 2: V√©rification API
    console.log('üîó PHASE 2: API Backend');
    
    const apiMenuItems = await api.getRestaurantMenuItems(process.env.TEST_RESTAURANT_ID!);
    console.log(`üì° API: ${apiMenuItems.length} plats r√©cup√©r√©s`);
    
    expect(apiMenuItems.length).toBeGreaterThanOrEqual(8);
    
    // PHASE 3: Simulation Mobile
    console.log('üì± PHASE 3: Simulation Mobile');
    
    // Simuler s√©lection de plats comme l'app mobile
    const selectedItems = [
      apiMenuItems.find(item => item.name === 'Pizza Margherita'),
      apiMenuItems.find(item => item.name === 'Tiramisu'),
      apiMenuItems.find(item => item.name === 'Coca-Cola')
    ].filter(Boolean);
    
    expect(selectedItems.length).toBe(3);
    console.log(`üõí ${selectedItems.length} plats s√©lectionn√©s`);
    
    // Cr√©er commande
    const orderData = {
      restaurantId: process.env.TEST_RESTAURANT_ID,
      items: selectedItems.map(item => ({
        menuItemId: item.id,
        quantity: item.name === 'Coca-Cola' ? 2 : 1,
        unitPrice: item.price,
        specialNotes: item.name === 'Pizza Margherita' ? 'Sans oignons' : ''
      })),
      customerName: 'Test Flow Complet',
      customerPhone: '06.99.88.77.66',
      specialInstructions: 'Test d\'int√©gration compl√®te OneEats',
      estimatedPickupTime: new Date(Date.now() + 30 * 60000).toISOString()
    };
    
    const order = await api.createOrder(orderData);
    expect(order.id).toBeDefined();
    console.log(`‚úÖ Commande cr√©√©e: ${order.id}`);
    
    // PHASE 4: V√©rification BDD
    console.log('üóÑÔ∏è PHASE 4: Validation Base de Donn√©es');
    
    await db.waitForCondition(async () => {
      const latestOrder = await db.getLatestOrder();
      return latestOrder?.id === order.id;
    }, 5000);
    
    const dbOrder = await db.getLatestOrder();
    expect(dbOrder.id).toBe(order.id);
    expect(dbOrder.restaurant_name).toBe('Pizza Palace');
    
    // PHASE 5: Simulation Dashboard Restaurant
    console.log('üè™ PHASE 5: Simulation Dashboard Restaurant');
    
    // Simuler r√©ception de commande dans le dashboard
    await page.goto('/restaurant/orders');
    await page.waitForLoadState('networkidle');
    
    // V√©rifier que la nouvelle commande appara√Æt
    // (En fonction de l'impl√©mentation du dashboard)
    const orderElements = page.locator('[data-testid="order-item"]');
    if (await orderElements.first().isVisible()) {
      const orderCount = await orderElements.count();
      console.log(`üìã ${orderCount} commandes visibles dans le dashboard`);
    }
    
    // PHASE 6: Simulation du cycle de vie de la commande
    console.log('üîÑ PHASE 6: Cycle de Vie de la Commande');
    
    await api.simulateOrderFlow(order.id);
    
    // V√©rification finale
    const finalOrder = await api.getOrder(order.id);
    expect(finalOrder.status).toBe('RECUPEREE');
    
    const finalDbOrder = await db.getLatestOrder();
    expect(finalDbOrder.id).toBe(order.id);
    
    console.log('üéâ FLOW COMPLET VALID√â !');
    console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
    console.log(`‚úÖ Dashboard: ${dashboardItemCount} plats`);
    console.log(`‚úÖ API: ${apiMenuItems.length} plats`);
    console.log(`‚úÖ Commande: ${order.id}`);
    console.log(`‚úÖ BDD: Valid√©e`);
    console.log(`‚úÖ Statut final: ${finalOrder.status}`);
    console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
  });

  test('Test de r√©gression : Fonctionnalit√©s critiques', async ({ page }) => {
    console.log('üîç Test de R√©gression OneEats');
    
    // Test 1: API disponible
    const restaurants = await api.getAllRestaurants();
    expect(restaurants.length).toBeGreaterThan(0);
    console.log('‚úÖ API Restaurants: OK');
    
    // Test 2: Pizza Palace pr√©sent
    const pizzaPalace = restaurants.find(r => r.id === process.env.TEST_RESTAURANT_ID);
    expect(pizzaPalace).toBeDefined();
    console.log('‚úÖ Pizza Palace: Pr√©sent');
    
    // Test 3: Menu Items API
    const menuItems = await api.getRestaurantMenuItems(process.env.TEST_RESTAURANT_ID!);
    expect(menuItems.length).toBeGreaterThanOrEqual(8);
    console.log(`‚úÖ Menu Items: ${menuItems.length} plats`);
    
    // Test 4: Dashboard accessible
    await page.goto('/restaurant/menu');
    await expect(page).toHaveTitle(/OneEats/);
    console.log('‚úÖ Dashboard: Accessible');
    
    // Test 5: BDD coh√©rente
    const dbMenuCount = await db.getMenuItemsCount(process.env.TEST_RESTAURANT_ID!);
    expect(dbMenuCount).toBe(menuItems.length);
    console.log('‚úÖ Coh√©rence API-BDD: OK');
    
    // Test 6: Cr√©ation commande
    const testOrder = await api.createOrder({
      restaurantId: process.env.TEST_RESTAURANT_ID,
      items: [{
        menuItemId: menuItems[0].id,
        quantity: 1,
        unitPrice: menuItems[0].price,
        specialNotes: 'Test r√©gression'
      }],
      customerName: 'Test R√©gression',
      customerPhone: '06.00.00.00.00',
      specialInstructions: 'Test automatis√© de r√©gression',
      estimatedPickupTime: new Date(Date.now() + 30 * 60000).toISOString()
    });
    
    expect(testOrder.id).toBeDefined();
    console.log('‚úÖ Cr√©ation Commande: OK');
    
    console.log('üéØ Test de r√©gression termin√© - Toutes les fonctionnalit√©s critiques OK');
  });
});